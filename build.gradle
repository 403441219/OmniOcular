ext.mc_version = "1.7.10"
ext.mod_version = "1.0"
ext.env = System.getenv()

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = mc_version + "-" + mod_version
group= "me.exz.omniocular" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = "OmniOcular"

if (env.BUILD_NUMBER != null) {
    version += "build" + env.BUILD_NUMBER
}

jar {
    manifest {
        attributes 'FMLAT': 'OmniOcular_at.cfg'
        attributes 'FMLCorePlugin': 'me.exz.omniocular.asm.Core'
        attributes 'FMLCorePluginContainsFMLMod': true

    }
}

minecraft {
    version = "1.7.10-10.13.2.1291"
    runDir = "eclipse"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    compile "mcp.mobius.waila:Waila:1.5.10_1.7.10"
}

repositories {
    maven {
        name "ProfMobius"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'ChickenBones'
        url "http://chickenbones.net/maven/"
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
//configurations.compile.copy().each { file ->
//    logger.lifecycle "Processing ${file.path}..."
//    copy {
//        from(zipTree(file.path)) {
//            include '*_at.cfg'
//        }
//        into('src/api/resources/at')
//    }
//}